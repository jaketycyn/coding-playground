# ADR-001: Coding Playground Project Structure
- Status: Accepted
- Date: [2025-01-28]
- Deciders: Jake TyCyn Schmidt

## Context and Problem Statement

The Coding Playground application needs a clear and maintainable structure for organizing different types of content including LeetCode solutions, learning resources, tools, and blog posts. The structure should make it easy to add new content while maintaining clear separation between different sections.

## Decision Drivers

- Need to maintain clear organization of different LeetCode problems and their solutions
- Want to separate utility tools from learning resources
- Need to support a blog/diary section for documenting learning journey
- Want to make it easy to find specific solutions and resources
- Need to maintain type safety across the application
- Want to follow Next.js best practices for routing and component organization

## Decision

We will organize the project using the following structure:

```
src/
├── app/                                # Next.js app directory
│   ├── page.tsx                       # Home page
│   ├── layout.tsx                     # Root layout
│   ├── _components/                   # Shared components
│   │   ├── layout/
│   │   │   ├── Header/               # Site navigation
│   │   │   ├── Footer/
│   │   │   └── Sidebar/              # Problem categories, tags
│   │   └── shared/
│   │       ├── CodeBlock/            # Syntax highlighted code display
│   │       ├── ComplexityBadge/      # Time/Space complexity indicator
│   │       └── SolutionCard/         # Solution preview card
│   │
│   ├── leetcode/                      # LeetCode problems section
│   │   ├── page.tsx                  # Problems listing
│   │   ├── [problemId]/             # Individual problem pages
│   │   │   └── page.tsx
│   │   └── _components/             
│   │       ├── ProblemDescription/
│   │       ├── SolutionTabs/         # Toggle between TS/Python
│   │       └── TestCases/
│   │
│   ├── tools/                        # Utility tools section
│   │   ├── page.tsx                  # Tools listing
│   │   ├── calculator/              
│   │   │   └── page.tsx
│   │   ├── calendar/
│   │   │   └── page.tsx
│   │   └── _components/
│   │       ├── ToolCard/
│   │       └── [tool-specific]/
│   │
│   ├── learn/                        # Learning resources
│   │   ├── page.tsx                  # Resources landing
│   │   ├── algorithms/              # Algorithm concepts
│   │   │   └── page.tsx
│   │   ├── data-structures/
│   │   │   └── page.tsx
│   │   └── _components/
│   │       ├── ConceptCard/
│   │       └── ResourceList/
│   │
│   └── blog/                         # Coding diary/blog
│       ├── page.tsx                  # Blog listing
│       ├── [postId]/                # Individual posts
│       │   └── page.tsx
│       └── _components/
│           ├── PostCard/
│           └── TagCloud/
│
├── lib/                              # Shared utilities
│   ├── types/                       
│   │   ├── leetcode.types.ts        # Problem/Solution types
│   │   ├── tools.types.ts
│   │   └── blog.types.ts
│   │
│   ├── utils/                        
│   │   ├── code-formatter.ts        # Code formatting utilities
│   │   ├── complexity-parser.ts     # Parse Big O notation
│   │   └── markdown.ts             # Blog post processing
│   │
│   └── constants/                    
│       ├── routes.ts
│       └── categories.ts            # Problem categories
│
├── content/                          # Markdown content
│   ├── leetcode/                    # Problem descriptions
│   ├── blog/                       # Blog posts
│   └── learn/                      # Learning resources
│
└── public/                           
    └── images/
        ├── problems/                # Problem-specific diagrams
        └── blog/                    # Blog post images
```

## Key Features and Organization

### Main Sections

1. **LeetCode Problems** (`/leetcode`)
   - Individual problem pages with descriptions
   - Multiple solution implementations (TS/Python)
   - Time/Space complexity analysis
   - Test cases and examples

2. **Tools** (`/tools`)
   - Simple utility applications
   - Interactive demonstrations
   - Practical coding examples

3. **Learning Resources** (`/learn`)
   - Algorithm explanations
   - Data structure concepts
   - Programming patterns
   - Study guides

4. **Blog/Coding Diary** (`/blog`)
   - Learning journey documentation
   - Problem-solving approaches
   - Technical discoveries
   - Study progress

### Component Organization

1. **Shared Components** (`app/_components/`)
   - Code display and syntax highlighting
   - Navigation and layout elements
   - Reusable cards and lists

2. **Section-Specific Components**
   - Problem-specific visualizations
   - Tool-specific interfaces
   - Blog post formatting

### Content Management

- Markdown files for problem descriptions and blog posts
- Separate content directory for easier management
- Clear separation of content and presentation

### Type Safety

- Comprehensive type definitions for all features
- Shared interfaces for common patterns
- Strong typing for problem solutions

## Consequences

### Positive

- Clear organization of different content types
- Easy to add new problems and solutions
- Scalable structure for blog posts
- Maintainable separation of concerns
- Type-safe implementation

### Negative

- More complex folder structure
- Need to maintain consistency across sections
- Regular updates required for learning content